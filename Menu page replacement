#include <stdio.h>

// ---------- Function for FIFO ----------
void fifo() {
    int frames, pages, i, j, k = 0, pageFaults = 0;
    printf("Enter number of frames: ");
    scanf("%d", &frames);
    printf("Enter number of pages: ");
    scanf("%d", &pages);

    int ref[pages], frame[frames];
    printf("Enter reference string: ");
    for (i = 0; i < pages; i++)
        scanf("%d", &ref[i]);

    for (i = 0; i < frames; i++)
        frame[i] = -1;

    printf("\nPage\tFrames\n");
    for (i = 0; i < pages; i++) {
        int found = 0;
        for (j = 0; j < frames; j++)
            if (frame[j] == ref[i])
                found = 1;

        if (!found) {
            frame[k] = ref[i];
            k = (k + 1) % frames;
            pageFaults++;
        }

        printf("%d\t", ref[i]);
        for (j = 0; j < frames; j++)
            frame[j] == -1 ? printf("- ") : printf("%d ", frame[j]);
        printf("\n");
    }
    printf("\nTotal Page Faults (FIFO): %d\n\n", pageFaults);
}

// ---------- Function for LRU ----------
void lru() {
    int frames, pages;
    printf("Enter number of frames: ");
    scanf("%d", &frames);
    printf("Enter number of pages: ");
    scanf("%d", &pages);

    int ref[pages], frame[frames], recent[frames];
    printf("Enter reference string: ");
    for (int i = 0; i < pages; i++)
        scanf("%d", &ref[i]);

    for (int i = 0; i < frames; i++)
        frame[i] = -1, recent[i] = 0;

    int time = 0, pageFaults = 0;
    printf("\nPage\tFrames\n");
    for (int i = 0; i < pages; i++) {
        int page = ref[i], found = 0;
        for (int j = 0; j < frames; j++) {
            if (frame[j] == page) {
                found = 1;
                recent[j] = ++time;
                break;
            }
        }

        if (!found) {
            int emptyPos = -1;
            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    emptyPos = j;
                    break;
                }
            }

            if (emptyPos != -1) {
                frame[emptyPos] = page;
                recent[emptyPos] = ++time;
            } else {
                int lruPos = 0;
                for (int j = 1; j < frames; j++)
                    if (recent[j] < recent[lruPos])
                        lruPos = j;
                frame[lruPos] = page;
                recent[lruPos] = ++time;
            }
            pageFaults++;
        }

        printf("%d\t", page);
        for (int j = 0; j < frames; j++)
            frame[j] == -1 ? printf("- ") : printf("%d ", frame[j]);
        printf("\n");
    }
    printf("\nTotal Page Faults (LRU): %d\n\n", pageFaults);
}

// ---------- Helper for Optimal ----------
int predict(int ref[], int frame[], int pages, int index, int frames) {
    int farthest = index, pos = -1;
    for (int i = 0; i < frames; i++) {
        int j;
        for (j = index; j < pages; j++) {
            if (frame[i] == ref[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }
        if (j == pages)
            return i;
    }
    return (pos == -1) ? 0 : pos;
}

// ---------- Function for Optimal ----------
void optimal() {
    int frames, pages;
    printf("Enter number of frames: ");
    scanf("%d", &frames);
    printf("Enter number of pages: ");
    scanf("%d", &pages);

    int ref[pages], frame[frames];
    printf("Enter reference string: ");
    for (int i = 0; i < pages; i++)
        scanf("%d", &ref[i]);

    for (int i = 0; i < frames; i++)
        frame[i] = -1;

    int pageFaults = 0;
    printf("\nPage\tFrames\n");
    for (int i = 0; i < pages; i++) {
        int page = ref[i], found = 0;
        for (int j = 0; j < frames; j++)
            if (frame[j] == page)
                found = 1;

        if (!found) {
            int emptyPos = -1;
            for (int j = 0; j < frames; j++)
                if (frame[j] == -1) {
                    emptyPos = j;
                    break;
                }

            if (emptyPos != -1)
                frame[emptyPos] = page;
            else {
                int pos = predict(ref, frame, pages, i + 1, frames);
                frame[pos] = page;
            }
            pageFaults++;
        }

        printf("%d\t", page);
        for (int j = 0; j < frames; j++)
            frame[j] == -1 ? printf("- ") : printf("%d ", frame[j]);
        printf("\n");
    }
    printf("\nTotal Page Faults (Optimal): %d\n\n", pageFaults);
}

// ---------- Main Menu ----------
int main() {
    int choice;
    do {
        printf("Page Replacement Algorithms Menu:\n");
        printf("1. FIFO\n");
        printf("2. LRU\n");
        printf("3. Optimal\n");
        printf("4. Exit\n");
        printf("Enter your choice (1-4): ");
        scanf("%d", &choice);
        switch (choice) {
            case 1: fifo(); break;
            case 2: lru(); break;
            case 3: optimal(); break;
            case 4: printf("Exiting program.\n"); break;
            default: printf("Invalid choice! Try again.\n");
        }
    } while (choice != 4);
    return 0;
}
